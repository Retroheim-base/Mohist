--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -13,7 +13,7 @@
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.buffer.Unpooled;
 import it.unimi.dsi.fastutil.longs.LongIterator;
-import java.awt.GraphicsEnvironment;
+import java.awt.*;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.IOException;
@@ -38,15 +38,17 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Optional;
 import java.util.Random;
 import java.util.UUID;
-import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import jline.console.ConsoleReader;
+import joptsimple.OptionException;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import joptsimple.OptionSpec;
@@ -137,25 +139,28 @@
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.event.world.WorldLoadEvent;
 
 public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask> implements ISnooperInfo, ICommandSource, AutoCloseable, Runnable {
    private static final Logger field_147145_h = LogManager.getLogger();
    public static final File field_152367_a = new File("usercache.json");
    private static final CompletableFuture<Unit> field_223713_i = CompletableFuture.completedFuture(Unit.INSTANCE);
    public static final WorldSettings field_213219_c = (new WorldSettings((long)"North Carolina".hashCode(), GameType.SURVIVAL, true, false, WorldType.field_77137_b)).func_77159_a();
-   private final SaveFormat field_71310_m;
+   public SaveFormat field_71310_m;
    private final Snooper field_71307_n = new Snooper("server", this, Util.func_211177_b());
-   private final File field_71308_o;
+   public File field_71308_o;
    private final List<Runnable> field_71322_p = Lists.newArrayList();
    private final DebugProfiler field_71304_b = new DebugProfiler(this::func_71259_af);
    private final NetworkSystem field_147144_o;
-   protected final IChunkStatusListenerFactory field_213220_d;
+   public final IChunkStatusListenerFactory field_213220_d;
    private final ServerStatusResponse field_147147_p = new ServerStatusResponse();
    private final Random field_147146_q = new Random();
-   private final DataFixer field_184112_s;
+   public final DataFixer field_184112_s;
    private String field_71320_r;
    private int field_71319_s = -1;
-   private final Map<DimensionType, ServerWorld> field_71305_c = Maps.newIdentityHashMap();
+   public final Map<DimensionType, ServerWorld> field_71305_c = Maps.newIdentityHashMap();
    private PlayerList field_71318_t;
    private volatile boolean field_71317_u = true;
    private boolean field_71316_v;
@@ -196,7 +201,7 @@
    private final GameProfileRepository field_152365_W;
    private final PlayerProfileCache field_152366_X;
    private long field_147142_T;
-   protected final Thread field_175590_aa = Util.func_200696_a(new Thread(this, "Server thread"), (p_213187_0_) -> {
+   public final Thread field_175590_aa = Util.func_200696_a(new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread"), (p_213187_0_) -> {
       p_213187_0_.setUncaughtExceptionHandler((p_213206_0_, p_213206_1_) -> {
          field_147145_h.error(p_213206_1_);
       });
@@ -210,7 +215,7 @@
    private final ResourcePackList<ResourcePackInfo> field_195577_ad = new ResourcePackList<>(ResourcePackInfo::new);
    @Nullable
    private FolderPackFinder field_195578_ae;
-   private final Commands field_195579_af;
+   public Commands field_195579_af;
    private final RecipeManager field_199530_ag = new RecipeManager();
    private final NetworkTagManager field_199736_ah = new NetworkTagManager();
    private final ServerScoreboard field_200255_ai = new ServerScoreboard(this);
@@ -221,34 +226,49 @@
    private final LootTableManager field_200256_aj = new LootTableManager(this.field_229734_an_);
    private final AdvancementManager field_200257_ak = new AdvancementManager();
    private final FunctionManager field_200258_al = new FunctionManager(this);
+   private final net.minecraftforge.common.loot.LootModifierManager lootManager = new net.minecraftforge.common.loot.LootModifierManager();
    private final FrameTimer field_213215_ap = new FrameTimer();
    private boolean field_205745_an;
    private boolean field_212205_ao;
    private boolean field_213216_as;
    private float field_211152_ao;
-   private final Executor field_213217_au;
+   public final Executor field_213217_au;
    @Nullable
    private String field_213218_av;
+   // CraftBukkit start
+   public org.bukkit.craftbukkit.CraftServer server;
+   public OptionSet options;
+   public org.bukkit.command.ConsoleCommandSender console;
+   public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+   public ConsoleReader reader;
+   public static int currentTick = (int) (System.currentTimeMillis() / 50);
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public int autosavePeriod;
+   public File bukkitDataPackFolder;
+   public Commands vanillaCommandDispatcher;
+   private boolean forceTicks;
+   // CraftBukkit end
 
-   public MinecraftServer(File p_i50590_1_, Proxy p_i50590_2_, DataFixer p_i50590_3_, Commands p_i50590_4_, YggdrasilAuthenticationService p_i50590_5_, MinecraftSessionService p_i50590_6_, GameProfileRepository p_i50590_7_, PlayerProfileCache p_i50590_8_, IChunkStatusListenerFactory p_i50590_9_, String p_i50590_10_) {
+   public MinecraftServer(OptionSet options, Proxy p_i50590_2_, DataFixer dataFixerIn, Commands p_i50590_4_, YggdrasilAuthenticationService p_i50590_5_, MinecraftSessionService p_i50590_6_, GameProfileRepository p_i50590_7_, PlayerProfileCache p_i50590_8_, IChunkStatusListenerFactory p_i50590_9_, String p_i50590_10_) {
       super("Server");
       this.field_110456_c = p_i50590_2_;
-      this.field_195579_af = p_i50590_4_;
+      this.field_195579_af = this.vanillaCommandDispatcher = p_i50590_4_; // CraftBukkit
       this.field_152364_T = p_i50590_5_;
       this.field_147143_S = p_i50590_6_;
       this.field_152365_W = p_i50590_7_;
       this.field_152366_X = p_i50590_8_;
-      this.field_71308_o = p_i50590_1_;
+      // this.anvilFile = p_i50590_1_; // CraftBukkit
       this.field_147144_o = new NetworkSystem(this);
       this.field_213220_d = p_i50590_9_;
-      this.field_71310_m = new SaveFormat(p_i50590_1_.toPath(), p_i50590_1_.toPath().resolve("../backups"), p_i50590_3_);
-      this.field_184112_s = p_i50590_3_;
+      //this.anvilConverterForAnvilFile = new SaveFormat(p_i50590_1_.toPath(), p_i50590_1_.toPath().resolve("../backups"), dataFixerIn);
+      this.field_184112_s = dataFixerIn;
       this.field_195576_ac.func_219534_a(this.field_199736_ah);
       this.field_195576_ac.func_219534_a(this.field_229734_an_);
       this.field_195576_ac.func_219534_a(this.field_199530_ag);
       this.field_195576_ac.func_219534_a(this.field_200256_aj);
       this.field_195576_ac.func_219534_a(this.field_200258_al);
       this.field_195576_ac.func_219534_a(this.field_200257_ak);
+      field_195576_ac.func_219534_a(lootManager);
       this.field_213217_au = Util.func_215072_e();
       this.field_71294_K = p_i50590_10_;
    }
@@ -261,7 +281,7 @@
 
    protected abstract boolean func_71197_b() throws IOException;
 
-   protected void func_71237_c(String p_71237_1_) {
+   public void func_71237_c(String p_71237_1_) {
       if (this.func_71254_M().func_75801_b(p_71237_1_)) {
          field_147145_h.info("Converting map!");
          this.func_200245_b(new TranslationTextComponent("menu.convertingLevel"));
@@ -336,6 +356,8 @@
       this.func_200245_b(new TranslationTextComponent("menu.loadingLevel"));
       SaveHandler savehandler = this.func_71254_M().func_197715_a(p_71247_1_, this);
       this.func_175584_a(this.func_71270_I(), savehandler);
+      // Move factory creation earlier to prevent startupquery deadlock
+      IChunkStatusListener ichunkstatuslistener = this.field_213220_d.create(11);
       WorldInfo worldinfo = savehandler.func_75757_d();
       WorldSettings worldsettings;
       if (worldinfo == null) {
@@ -357,13 +379,16 @@
 
       worldinfo.func_230145_a_(this.getServerModName(), this.func_230045_q_().isPresent());
       this.func_195560_a(savehandler.func_75765_b(), worldinfo);
-      IChunkStatusListener ichunkstatuslistener = this.field_213220_d.create(11);
       this.func_213194_a(savehandler, worldinfo, worldsettings, ichunkstatuslistener);
       this.func_147139_a(this.func_147135_j(), true);
-      this.func_213186_a(ichunkstatuslistener);
+      for (final ServerWorld worldserver : this.func_212370_w()) {
+         this.loadInitialChunks(worldserver.func_72863_F().field_217237_a.field_219266_t, worldserver);
+         this.server.getPluginManager().callEvent(new WorldLoadEvent(worldserver.getWorldCB()));
+      }
    }
 
    protected void func_213194_a(SaveHandler p_213194_1_, WorldInfo p_213194_2_, WorldSettings p_213194_3_, IChunkStatusListener p_213194_4_) {
+      net.minecraftforge.common.DimensionManager.fireRegister();
       if (this.func_71242_L()) {
          p_213194_2_.func_176127_a(field_213219_c);
       }
@@ -407,6 +432,7 @@
          if (dimensiontype != DimensionType.field_223227_a_) {
             this.field_71305_c.put(dimensiontype, new ServerMultiWorld(serverworld1, this, this.field_213217_au, p_213194_1_, dimensiontype, this.field_71304_b, p_213194_4_));
          }
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(field_71305_c.get(dimensiontype)));
       }
 
    }
@@ -446,7 +472,7 @@
       this.func_229737_ba_();
    }
 
-   protected void func_213186_a(IChunkStatusListener p_213186_1_) {
+   public void loadInitialChunks(IChunkStatusListener p_213186_1_, ServerWorld worldserver) {
       this.func_200245_b(new TranslationTextComponent("menu.generatingTerrain"));
       ServerWorld serverworld = this.func_71218_a(DimensionType.field_223227_a_);
       field_147145_h.info("Preparing start region for dimension " + DimensionType.func_212678_a(serverworld.field_73011_w.func_186058_p()));
@@ -540,8 +566,27 @@
       this.func_71260_j();
    }
 
+   // CraftBukkit start
+   private boolean hasStopped = false;
+   private final Object stopLock = new Object();
+   public final boolean hasStopped() {
+      synchronized (stopLock) {
+         return hasStopped;
+      }
+   }
+   // CraftBukkit end
+
    protected void func_71260_j() {
+      synchronized (this.stopLock) {
+         if (this.hasStopped) {
+            return;
+         }
+         this.hasStopped = true;
+      }
       field_147145_h.info("Stopping server");
+      if (this.server != null) {
+         this.server.disablePlugins();
+      }
       if (this.func_147137_ag() != null) {
          this.func_147137_ag().func_151268_b();
       }
@@ -565,6 +610,7 @@
       for(ServerWorld serverworld1 : this.func_212370_w()) {
          if (serverworld1 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(serverworld1));
                serverworld1.close();
             } catch (IOException ioexception) {
                field_147145_h.error("Exception closing the level", (Throwable)ioexception);
@@ -605,6 +651,7 @@
    public void run() {
       try {
          if (this.func_71197_b()) {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStarted(this);
             this.field_211151_aa = Util.func_211177_b();
             this.field_147147_p.func_151315_a(new StringTextComponent(this.field_71286_C));
             this.field_147147_p.func_151321_a(new ServerStatusResponse.Version(SharedConstants.func_215069_a().getName(), SharedConstants.func_215069_a().getProtocolVersion()));
@@ -636,9 +683,15 @@
                this.field_71304_b.func_219897_b();
                this.field_71296_Q = true;
             }
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          } else {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.func_71228_a((CrashReport)null);
          }
+      } catch (net.minecraftforge.fml.StartupQuery.AbortedException e) {
+         // ignore silently
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
       } catch (Throwable throwable1) {
          field_147145_h.error("Encountered an unexpected exception", throwable1);
          CrashReport crashreport;
@@ -655,6 +708,7 @@
             field_147145_h.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          this.func_71228_a(crashreport);
       } finally {
          try {
@@ -663,6 +717,7 @@
          } catch (Throwable throwable) {
             field_147145_h.error("Exception stopping the server", throwable);
          } finally {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopped(this);
             this.func_71240_o();
          }
 
@@ -764,6 +819,7 @@
 
    protected void func_71217_p(BooleanSupplier p_71217_1_) {
       long i = Util.func_211178_c();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPreServerTick();
       ++this.field_71315_w;
       this.func_71190_q(p_71217_1_);
       if (i - this.field_147142_T >= 5000000000L) {
@@ -778,6 +834,7 @@
 
          Collections.shuffle(Arrays.asList(agameprofile));
          this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
+         this.field_147147_p.invalidateJson();
       }
 
       if (this.field_71315_w % 6000 == 0) {
@@ -805,6 +862,7 @@
       long i1 = Util.func_211178_c();
       this.field_213215_ap.func_181747_a(i1 - i);
       this.field_71304_b.func_76319_b();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPostServerTick();
    }
 
    protected void func_71190_q(BooleanSupplier p_71190_1_) {
@@ -812,7 +870,8 @@
       this.func_193030_aL().func_73660_a();
       this.field_71304_b.func_219895_b("levels");
 
-      for(ServerWorld serverworld : this.func_212370_w()) {
+      for(ServerWorld serverworld : this.getWorldArray()) {
+         long tickStart = Util.func_211178_c();
          if (serverworld.field_73011_w.func_186058_p() == DimensionType.field_223227_a_ || this.func_71255_r()) {
             this.field_71304_b.func_194340_a(() -> {
                return serverworld.func_72912_H().func_76065_j() + " " + Registry.field_212622_k.func_177774_c(serverworld.field_73011_w.func_186058_p());
@@ -824,6 +883,7 @@
             }
 
             this.field_71304_b.func_76320_a("tick");
+            net.minecraftforge.fml.hooks.BasicEventHooks.onPreWorldTick(serverworld);
 
             try {
                serverworld.func_72835_b(p_71190_1_);
@@ -832,12 +892,16 @@
                serverworld.func_72914_a(crashreport);
                throw new ReportedException(crashreport);
             }
+            net.minecraftforge.fml.hooks.BasicEventHooks.onPostWorldTick(serverworld);
 
             this.field_71304_b.func_76319_b();
             this.field_71304_b.func_76319_b();
          }
+         perWorldTickTimes.computeIfAbsent(serverworld.func_201675_m().func_186058_p(), k -> new long[100])[this.field_71315_w % 100] = Util.func_211178_c() - tickStart;
       }
 
+      this.field_71304_b.func_219895_b("dim_unloading");
+      net.minecraftforge.common.DimensionManager.unloadWorlds(this, this.field_71315_w % 200 == 0);
       this.field_71304_b.func_219895_b("connection");
       this.func_147137_ag().func_151269_c();
       this.field_71304_b.func_219895_b("players");
@@ -878,6 +942,7 @@
       OptionSpec<Integer> optionspec10 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec11 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec12 = optionparser.nonOptions();
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
 
       try {
          OptionSet optionset = optionparser.parse(p_main_0_);
@@ -885,10 +950,9 @@
             optionparser.printHelpOn(System.err);
             return;
          }
-
          Path path = Paths.get("server.properties");
          ServerPropertiesProvider serverpropertiesprovider = new ServerPropertiesProvider(path);
-         serverpropertiesprovider.func_219035_b();
+         if (optionset.has(optionspec1) || !Files.exists(path)) serverpropertiesprovider.func_219035_b();
          Path path1 = Paths.get("eula.txt");
          ServerEula servereula = new ServerEula(path1);
          if (optionset.has(optionspec1)) {
@@ -910,7 +974,11 @@
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s, field_152367_a.getName()));
          String s1 = Optional.ofNullable(optionset.valueOf(optionspec9)).orElse(serverpropertiesprovider.func_219034_a().field_219021_o);
-         final DedicatedServer dedicatedserver = new DedicatedServer(new File(s), serverpropertiesprovider, DataFixesManager.func_210901_a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache, LoggingChunkStatusListener::new, s1);
+         if (s1 == null || s1.isEmpty() || new File(s, s1).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            field_147145_h.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s1);
+            return;
+         }
+         final DedicatedServer dedicatedserver = new DedicatedServer(optionset, serverpropertiesprovider, DataFixesManager.func_210901_a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache, LoggingChunkStatusListener::new, s1);
          dedicatedserver.func_71224_l(optionset.valueOf(optionspec7));
          dedicatedserver.func_71208_b(optionset.valueOf(optionspec10));
          dedicatedserver.func_71204_b(optionset.has(optionspec2));
@@ -927,6 +995,7 @@
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
                dedicatedserver.func_71263_m(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(field_147145_h));
@@ -971,7 +1040,7 @@
    }
 
    public ServerWorld func_71218_a(DimensionType p_71218_1_) {
-      return this.field_71305_c.get(p_71218_1_);
+      return net.minecraftforge.common.DimensionManager.getWorld(this, p_71218_1_, true, true);
    }
 
    public Iterable<ServerWorld> func_212370_w() {
@@ -1010,7 +1079,7 @@
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return net.minecraftforge.fml.BrandingControl.getServerBranding();
    }
 
    public CrashReport func_71230_b(CrashReport p_71230_1_) {
@@ -1396,6 +1465,10 @@
    public FunctionManager func_193030_aL() {
       return this.field_200258_al;
    }
+   
+   public net.minecraftforge.common.loot.LootModifierManager getLootModifierManager() {
+	   return lootManager;
+   }
 
    public void func_193031_aM() {
       if (!this.func_213162_bc()) {
@@ -1567,6 +1640,31 @@
 
    public abstract boolean func_213199_b(GameProfile p_213199_1_);
 
+   private Map<DimensionType, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(DimensionType dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<DimensionType, ServerWorld> forgeGetWorldMap() {
+      return this.field_71305_c;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerWorld[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerWorld[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.field_71305_c.values().stream().toArray(x -> new ServerWorld[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void func_223711_a(Path p_223711_1_) throws IOException {
       Path path = p_223711_1_.resolve("levels");
 
@@ -1651,4 +1749,16 @@
    private void func_229737_ba_() {
       Block.field_176229_d.forEach(BlockState::func_215692_c);
    }
+
+   // CraftBukkit start
+   @Override
+   public boolean func_213162_bc() {
+      return super.func_213162_bc() || this.func_71241_aa(); // CraftBukkit - MC-142590
+   }
+
+   @Deprecated
+   public static MinecraftServer getServer() {
+      return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+   }
+   // CraftBukkit end
 }
